import 'dart:io';
import 'package:flutter/material.dart';
import 'package:process_run/shell.dart';
import 'package:http/http.dart' as http;
import 'package:path_provider/path_provider.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Sugarchain Miner',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MinerScreen(),
    );
  }
}

class MinerScreen extends StatefulWidget {
  @override
  _MinerScreenState createState() => _MinerScreenState();
}

class _MinerScreenState extends State<MinerScreen> {
  String _output = 'Ready to start mining.';
  bool _isDownloading = false;
  String _minerPath = '';

  Future<void> _downloadAndExtractMiner() async {
    setState(() {
      _output = 'Downloading miner...';
      _isDownloading = true;
    });

    try {
      // URL Miner (cpuminer-opt-sugarchain prebuilt binary)
      final url = 'https://github.com/cryptozeny/cpuminer-opt-sugarchain/releases/download/v1.3.1/cpuminer-opt-sugarchain-linux.tar.gz';

      // Get temporary directory
      final tempDir = await getTemporaryDirectory();
      final downloadPath = '${tempDir.path}/cpuminer.tar.gz';
      final extractPath = '${tempDir.path}/cpuminer';

      // Download miner
      final response = await http.get(Uri.parse(url));
      final file = File(downloadPath);
      await file.writeAsBytes(response.bodyBytes);

      setState(() {
        _output = 'Extracting miner...';
      });

      // Extract tar.gz file
      final result = await Process.run('tar', ['-xzf', downloadPath, '-C', tempDir.path]);
      if (result.exitCode == 0) {
        _minerPath = '$extractPath/cpuminer';
        await Process.run('chmod', ['+x', _minerPath]); // Set executable permissions
        setState(() {
          _output = 'Miner downloaded and ready.';
          _isDownloading = false;
        });
      } else {
        throw Exception('Extraction failed: ${result.stderr}');
      }
    } catch (e) {
      setState(() {
        _output = 'Error: $e';
        _isDownloading = false;
      });
    }
  }

  Future<void> _startMining() async {
    if (_minerPath.isEmpty) {
      setState(() {
        _output = 'Miner not downloaded. Please download first.';
      });
      return;
    }

    setState(() {
      _output = 'Starting mining...';
    });

    final shell = Shell();

    // Pool, wallet, and algorithm configuration
    final pool = '103.120.19.244:501';
    final wallet = 'sugar1q8cfldyl35e8aq7je455ja9mhlazhw8xn22gvmr';
    final algo = 'yespowersugar';

    // Command
    final command = [
      _minerPath,
      '--algo',
      algo,
      '--url',
      'stratum+tcp://$pool',
      '--user',
      wallet,
    ];

    try {
      final result = await shell.run(command.join(' '));
      setState(() {
        _output = result.map((r) => r.outText).join('\n');
      });
    } catch (e) {
      setState(() {
        _output = 'Error: $e';
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Sugarchain Miner'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            Expanded(
              child: SingleChildScrollView(
                child: Text(_output),
              ),
            ),
            SizedBox(height: 16),
            if (!_isDownloading)
              ElevatedButton(
                onPressed: _downloadAndExtractMiner,
                child: Text('Download Miner'),
              ),
            SizedBox(height: 8),
            ElevatedButton(
              onPressed: _isDownloading ? null : _startMining,
              child: Text('Start Mining'),
            ),
          ],
        ),
      ),
    );
  }
}
